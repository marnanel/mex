import os
import yex
import collections

PATH = ''

AUTOGENERATED = f'Autogenerated by {__file__}. Do not edit!'

def write(filename, content):
    if os.path.exists(filename):
        existing = open(filename, 'r').read()

        if existing==content:
            print(f'  -- {filename} is up to date')
            return

    with open(filename, 'w') as f:
        f.write(content)

def document_group(name, filename, instances):

    if name=='control':
        return

    module = yex.control.__dict__[name]

    docstring = module.__doc__

    if docstring is None:
        title = name
        details = ''
    else:
        lines = docstring.strip().split('\n')
        title = lines[0]

        if title.endswith('.'):
            title = title[:-1]

        details = '\n'.join(lines[1:]).strip()

    result = ''
    result += f'<!--\n{AUTOGENERATED}\n-->\n\n'

    icon_filename = os.path.join('symbols',
            f'icon-control-{name}.png')

    if os.path.exists(os.path.join(PATH, icon_filename)):
        result += '```{eval-rst}\n'
        result +='.. image:: '+icon_filename+'\n'
        result += f'  :alt: {name}\n'
        result += '  :class: bg-primary\n'
        SIZE = '10em'
        result += f'  :width: {SIZE}\n'
        result += f'  :height: {SIZE}\n'
        result += '  :align: right\n'
        result += '\n'
        result += '```\n'

    result += '# ' + title + '\n'
    result += '\n'

    result += details + '\n\n'

    for name, cls in instances.items():

        admonitions = []

        if name.startswith('C_'):
            continue
        elif name.startswith('X_'):
            control_name = name[2:].lower()

            admonitions.append(
                    "This class should not be accessed from TeX code, "
                    "so it has been given a name beginning with `X_`.\n"
                    "That prefix is stripped when placing it in the\n"
                    "document's dictionary, so you will find this control\n"
                    f"at `doc['{control_name}'].\n"
                    )
        elif name.startswith('S_'):
            if name=='S_0020':
                control_name = '&#x5c;‚ê£'
            else:
                control_name = '&#x5c;' + chr(int(name[2:], 16))

            admonitions.append(
                    "This control has a name which can't be\n"
                    "directly represented in Python, so it's given\n"
                    "as a hex codepoint instead. You can find it\n"
                    "in the document dictionary at:\n\n"
                    "```\n"
                    fr"doc['\{chr(int(name[2:], 16))}']"
                    "\n"
                    "```\n"
                    )
        else:
            control_name = '\\' + name.lower()

        if issubclass(cls, yex.control.C_Expandable):
            admonitions.append(
                    "This is an expandable control."
                    )

        try:
            cls()(None)
        except NotImplementedError:
            admonitions.append('Not yet implemented.\n')
        except Exception:
            pass

        result += f'## {control_name}\n'

        for admonition in admonitions:
            result += '<div class="admonition note">\n'
            result += admonition+'\n'
            result += '</div>\n\n'

        result += '```{eval-rst}\n'
        result += f'.. autoclass:: yex.control.{name}\n'
        result += '```\n'
        result += '\n'

    write(filename, result)

def main():
    print(f'Producing docs for {yex.control}:')

    module = type(yex)

    d = yex.control.__dict__

    control_types = collections.defaultdict(lambda: {})

    for f,v in d.items():
        try:
            if issubclass(v, yex.control.C_Control):
                control_types[v.__module__][f] = v
        except TypeError:
            pass

    control_docs_list = ''
    control_docs_list += '..\n'
    control_docs_list += f'  {AUTOGENERATED}\n\n'

    control_docs_list += '.. toctree::\n'
    control_docs_list += '  :caption: Controls\n'
    control_docs_list += '\n'

    for name, cls in sorted(control_types.items()):
        name = name.split('.')[-1]
        filename = f'control-{name}.md'
        control_docs_list += f'  {filename}\n'

        document_group(name,
                os.path.join(PATH, filename), cls)

    write(
            os.path.join(PATH,
                'control-docs-list.rst'),
            control_docs_list,
        )

    print('done.')

if __name__=='__main__':
    main()
